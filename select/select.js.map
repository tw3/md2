{"version":3,"file":"select.js","sourceRoot":"","sources":["../../../src/lib/select/select.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  Renderer,\n  Self,\n  ViewEncapsulation,\n  ViewChild,\n  ChangeDetectorRef,\n  Attribute,\n} from '@angular/core';\nimport { Md2Option, Md2OptionSelectionChange } from './option';\nimport { ENTER, SPACE } from '../core/keyboard/keycodes';\nimport { FocusKeyManager } from '../core/a11y/focus-key-manager';\nimport { Dir } from '../core/rtl/dir';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\nimport { transformPlaceholder, transformPanel, fadeInContent } from './select-animations';\nimport { ControlValueAccessor, NgControl } from '@angular/forms';\nimport { coerceBooleanProperty } from '../core/coercion/boolean-property';\nimport { ConnectedOverlayDirective } from '../core/overlay/overlay-directives';\nimport { ViewportRuler } from '../core/overlay/position/viewport-ruler';\nimport { SelectionModel } from '../core/selection/selection';\nimport { MdSelectDynamicMultipleError, MdSelectNonArrayValueError } from './select-errors';\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/observable/merge';\nimport 'rxjs/add/operator/startWith';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The fixed height of every option element. */\nexport const SELECT_OPTION_HEIGHT = 48;\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The max number of options visible at once in the select panel. */\nexport const SELECT_MAX_OPTIONS_DISPLAYED = 5;\n\n/** The fixed height of the select's trigger element. */\nexport const SELECT_TRIGGER_HEIGHT = 30;\n\n/**\n * Must adjust for the difference in height between the option and the trigger,\n * so the text will align on the y axis.\n * (SELECT_OPTION_HEIGHT (48) - SELECT_TRIGGER_HEIGHT (30)) / 2 = 9\n */\nexport const SELECT_OPTION_HEIGHT_ADJUSTMENT = 9;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PADDING * 1.75) + 20 = 48\n * The padding is multiplied by 1.75 because the checkbox's margin is half the padding, and\n * the browser adds ~4px, because we're using inline elements.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.25 + 20;\n\n/**\n * The panel's padding on the y-axis. This padding indicates there are more\n * options available if you scroll.\n */\nexport const SELECT_PANEL_PADDING_Y = 16;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Change event object that is emitted when the select value has changed. */\nexport class Md2SelectChange {\n  constructor(public source: Md2Select, public value: any) { }\n}\n\n/** Allowed values for the floatPlaceholder option. */\nexport type Md2SelectFloatPlaceholderType = 'always' | 'never' | 'auto';\n\n@Component({\n  moduleId: module.id,\n  selector: 'md2-select',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    'role': 'listbox',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': '_control?.invalid || \"false\"',\n    '[attr.aria-owns]': '_optionIds',\n    '[class.md2-select-disabled]': 'disabled',\n    '[class.md2-select]': 'true',\n    '(keydown)': '_handleKeydown($event)',\n    '(blur)': '_onBlur()'\n  },\n  animations: [\n    transformPlaceholder,\n    transformPanel,\n    fadeInContent\n  ],\n  exportAs: 'md2Select',\n})\nexport class Md2Select implements AfterContentInit, ControlValueAccessor, OnDestroy {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Subscriptions to option events. */\n  private _optionSubscription: Subscription;\n\n  /** Subscription to changes in the option list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to tab events while overlay is focused. */\n  private _tabSubscription: Subscription;\n\n  /** Whether filling out the select is required in the form.  */\n  private _required: boolean = false;\n\n  /** Whether the select is disabled.  */\n  private _disabled: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<Md2Option>;\n\n  /** The animation state of the placeholder. */\n  private _placeholderState = '';\n\n  /** Tab index for the element. */\n  private _tabIndex: number;\n\n  /**\n   * The width of the trigger. Must be saved to set the min width of the overlay panel\n   * and the width of the selected value.\n   */\n  _triggerWidth: number;\n\n  /**\n   * The width of the selected option's value. Must be set programmatically\n   * to ensure its overflow is clipped, as it's absolutely positioned.\n   */\n  _selectedValueWidth: number;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: FocusKeyManager;\n\n  /** View -> model callback called when value changes */\n  _onChange = (value: any) => { };\n\n  /** View -> model callback called when select has been touched */\n  _onTouched = () => { };\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /**\n   * The x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction.\n   */\n  _offsetX = 0;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(ConnectedOverlayDirective) overlayDir: ConnectedOverlayDirective;\n\n  /** All of the defined select options. */\n  @ContentChildren(Md2Option) options: QueryList<Md2Option>;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder() { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n\n    // Must wait to record the trigger width to ensure placeholder width is included.\n    Promise.resolve(null).then(() => this._triggerWidth = this._getWidth());\n  }\n\n  /** Whether the component is disabled. */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required() { return this._required; }\n  set required(value: any) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw new MdSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to float the placeholder text. */\n  @Input()\n  get floatPlaceholder(): Md2SelectFloatPlaceholderType { return this._floatPlaceholder; }\n  set floatPlaceholder(value: Md2SelectFloatPlaceholderType) {\n    this._floatPlaceholder = value || 'auto';\n  }\n  private _floatPlaceholder: Md2SelectFloatPlaceholderType = 'auto';\n\n  /** Tab index for the select element. */\n  @Input()\n  get tabIndex(): number { return this._disabled ? -1 : this._tabIndex; }\n  set tabIndex(value: number) {\n    if (typeof value !== 'undefined') {\n      this._tabIndex = value;\n    }\n  }\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string = '';\n\n  /** Combined stream of all of the child options' change events. */\n  get optionSelectionChanges(): Observable<Md2OptionSelectionChange> {\n    return Observable.merge(...this.options.map(option => option.onSelectionChange));\n  }\n\n  /** Event emitted when the select has been opened. */\n  @Output() onOpen: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the select has been closed. */\n  @Output() onClose: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the selected value has been changed by the user. */\n  @Output() change: EventEmitter<Md2SelectChange> = new EventEmitter<Md2SelectChange>();\n\n  constructor(private _element: ElementRef, private _renderer: Renderer,\n    private _viewportRuler: ViewportRuler, private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() private _dir: Dir, @Self() @Optional() public _control: NgControl,\n    @Attribute('tabindex') tabIndex: string) {\n    if (this._control) {\n      this._control.valueAccessor = this;\n    }\n\n    this._tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel = new SelectionModel<Md2Option>(this.multiple, null, false);\n    this._initKeyManager();\n\n    this._changeSubscription = this.options.changes.startWith(null).subscribe(() => {\n      this._resetOptions();\n\n      if (this._control) {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve(null).then(() => this._setSelectionByValue(this._control.value));\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._dropSubscriptions();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._tabSubscription) {\n      this._tabSubscription.unsubscribe();\n    }\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options.length) {\n      return;\n    }\n    this._calculateOverlayPosition();\n    this._placeholderState = this._floatPlaceholderState();\n    this._panelOpen = true;\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      if (this._selectionModel.isEmpty()) {\n        this._placeholderState = '';\n      }\n      this._focusHost();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): Md2Option | Md2Option[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    return this.multiple ?\n      this._selectionModel.selected.map(option => option.viewValue).join(', ') :\n      this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** The width of the trigger element. This is necessary to match\n   * the overlay width to the trigger width.\n   */\n  _getWidth(): number {\n    return this._getTriggerRect().width;\n  }\n\n  /** Ensures the panel opens if activated by the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this.open();\n    }\n  }\n\n  /**\n   * When the panel element is finished transforming in (though not fading in), it\n   * emits an event and focuses an option if the panel is open.\n   */\n  _onPanelDone(): void {\n    if (this.panelOpen) {\n      this._focusCorrectOption();\n      this.onOpen.emit();\n    } else {\n      this.onClose.emit();\n      this._panelDoneAnimating = false;\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    if (!this.panelOpen) {\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the scroll position of the scroll container. This must be called after\n   * the overlay pane is attached or the scroll container element will not yet be\n   * present in the DOM.\n   */\n  _setScrollTop(): void {\n    const scrollContainer =\n      this.overlayDir.overlayRef.overlayElement.querySelector('.md2-select-panel');\n    scrollContainer.scrollTop = this._scrollTop;\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    const isArray = Array.isArray(value);\n\n    if (this.multiple && value && !isArray) {\n      throw new MdSelectNonArrayValueError();\n    }\n\n    if (isArray) {\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else if (!this._selectValue(value)) {\n      this._clearSelection();\n    }\n\n    this._setValueWidth();\n\n    if (this._selectionModel.isEmpty()) {\n      this._placeholderState = '';\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): Md2Option {\n    let correspondingOption = this.options.find(option => this.equals(option.value, value));\n\n    if (correspondingOption) {\n      correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /**\n   * Compare two vars or objects\n   * @param o1 compare first object\n   * @param o2 compare second object\n   * @return boolean comparation result\n   */\n  private equals(o1: any, o2: any) {\n    if (o1 === o2) { return true; }\n    if (o1 === null || o2 === null) { return false; }\n    if (o1 !== o1 && o2 !== o2) { return true; }\n    let t1 = typeof o1, t2 = typeof o2, key: any, keySet: any;\n    if (t1 === t2 && t1 === 'object') {\n      keySet = Object.create(null);\n      for (key in o1) {\n        if (!this.equals(o1[key], o2[key])) { return false; }\n        keySet[key] = true;\n      }\n      for (key in o2) {\n        if (!(key in keySet) && key.charAt(0) !== '$' && o2[key]) { return false; }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Clears the select trigger and deselects every option in the list.\n   * @param skip Option that should not be deselected.\n   */\n  private _clearSelection(skip?: Md2Option): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _getTriggerRect(): ClientRect {\n    return this.trigger.nativeElement.getBoundingClientRect();\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new FocusKeyManager(this.options);\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close());\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    this._dropSubscriptions();\n    this._listenToOptions();\n    this._setOptionIds();\n    this._setOptionMultiple();\n  }\n\n  /** Listens to user-generated selection events on each option. */\n  private _listenToOptions(): void {\n    this._optionSubscription = this.optionSelectionChanges\n      .filter(event => event.isUserInput)\n      .subscribe(event => {\n        this._onSelect(event.source);\n        this._setValueWidth();\n\n        if (!this.multiple) {\n          this.close();\n        }\n      });\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: Md2Option): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      wasSelected ? option.deselect() : option.select();\n      this._sortValues();\n    } else {\n      this._clearSelection(option);\n      this._selectionModel.select(option);\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n    }\n  }\n\n  /** Unsubscribes from all option subscriptions. */\n  private _dropSubscriptions(): void {\n    if (this._optionSubscription) {\n      this._optionSubscription.unsubscribe();\n      this._optionSubscription = null;\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(): void {\n    let valueToEmit = Array.isArray(this.selected) ?\n      this.selected.map(option => option.value) :\n      this.selected.value;\n\n    this._onChange(valueToEmit);\n    this.change.emit(new Md2SelectChange(this, valueToEmit));\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Sets the `multiple` property on each option. The promise is necessary\n   * in order to avoid Angular errors when modifying the property after init.\n   * TODO: there should be a better way of doing this.\n   */\n  private _setOptionMultiple() {\n    if (this.multiple) {\n      Promise.resolve(null).then(() => {\n        this.options.forEach(option => option.multiple = this.multiple);\n      });\n    }\n  }\n\n  /**\n   * Must set the width of the selected option's value programmatically\n   * because it is absolutely positioned and otherwise will not clip\n   * overflow. The selection arrow is 9px wide, add 4px of padding = 13\n   */\n  private _setValueWidth() {\n    this._selectedValueWidth = this._triggerWidth - 13;\n  }\n\n  /**\n   * Focuses the selected item. If no option is selected, it will focus\n   * the first item instead.\n   */\n  private _focusCorrectOption(): void {\n    if (this._selectionModel.isEmpty()) {\n      this._keyManager.setFirstItemActive();\n    } else {\n      this._keyManager.setActiveItem(this._getOptionIndex(this._selectionModel.selected[0]));\n    }\n  }\n\n  /** Focuses the host element when the panel closes. */\n  private _focusHost(): void {\n    this._renderer.invokeElementMethod(this._element.nativeElement, 'focus');\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: Md2Option): number {\n    return this.options.reduce((result: number, current: Md2Option, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    this._offsetX = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X : SELECT_PANEL_PADDING_X;\n\n    if (!this._isRtl()) {\n      this._offsetX *= -1;\n    }\n\n    const panelHeight =\n      Math.min(this.options.length * SELECT_OPTION_HEIGHT, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = this.options.length * SELECT_OPTION_HEIGHT;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    if (this._selectionModel.hasValue()) {\n      const selectedIndex = this._getOptionIndex(this._selectionModel.selected[0]);\n      // We must maintain a scroll buffer so the selected option will be scrolled to the\n      // center of the overlay panel rather than the top.\n      const scrollBuffer = panelHeight / 2;\n      this._scrollTop = this._calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll);\n      this._offsetY = this._calculateOverlayOffset(selectedIndex, scrollBuffer, maxScroll);\n    } else {\n      // If no option is selected, the panel centers on the first option. In this case,\n      // we must only adjust for the height difference between the option element\n      // and the trigger element, then multiply it by -1 to ensure the panel moves\n      // in the correct direction up the page.\n      this._offsetY = (SELECT_OPTION_HEIGHT - SELECT_TRIGGER_HEIGHT) / 2 * -1;\n    }\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n    maxScroll: number): number {\n    const optionOffsetFromScrollTop = SELECT_OPTION_HEIGHT * selectedIndex;\n    const halfOptionHeight = SELECT_OPTION_HEIGHT / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return clampValue(0, optimalScrollPosition, maxScroll);\n  }\n\n  /**\n   * Figures out the appropriate animation state for the placeholder.\n   */\n  _getPlaceholderAnimationState(): string {\n    if (this.floatPlaceholder === 'never') {\n      return '';\n    }\n\n    if (this.floatPlaceholder === 'always') {\n      return this._floatPlaceholderState();\n    }\n\n    return this._placeholderState;\n  }\n\n  /**\n   * Determines the CSS `visibility` of the placeholder element.\n   */\n  _getPlaceholderVisibility(): 'visible' | 'hidden' {\n    return (this.floatPlaceholder !== 'never' || this._selectionModel.isEmpty()) ?\n      'visible' : 'hidden';\n  }\n\n  /** Returns the aria-label of the select component. */\n  get _ariaLabel(): string {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffset(selectedIndex: number, scrollBuffer: number,\n    maxScroll: number): number {\n    let optionOffsetFromPanelTop: number;\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * SELECT_OPTION_HEIGHT;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this.options.length - SELECT_MAX_OPTIONS_DISPLAYED;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop =\n        selectedDisplayIndex * SELECT_OPTION_HEIGHT + SELECT_PANEL_PADDING_Y;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - SELECT_OPTION_HEIGHT / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - SELECT_OPTION_HEIGHT_ADJUSTMENT;\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const viewportRect = this._viewportRuler.getViewportRect();\n    const triggerRect = this._getTriggerRect();\n\n    const topSpaceAvailable = triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n      viewportRect.height - triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n      Math.min(this.options.length * SELECT_OPTION_HEIGHT, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n      this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    const distanceBelowViewport = panelHeightBottom - bottomSpaceAvailable;\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n    maxScroll: number) {\n    const distanceAboveViewport = panelHeightTop - topSpaceAvailable;\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const originY =\n      Math.abs(this._offsetY) - SELECT_OPTION_HEIGHT_ADJUSTMENT + SELECT_OPTION_HEIGHT / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Figures out the floating placeholder state value. */\n  private _floatPlaceholderState(): string {\n    return this._isRtl() ? 'floating-rtl' : 'floating-ltr';\n  }\n}\n\n/** Clamps a value n between min and max values. */\nfunction clampValue(min: number, n: number, max: number): number {\n  return Math.min(Math.max(min, n), max);\n}\n"]}